[{"title":"静态网页博客总结","date":"2024-04-18T09:51:25.258Z","url":"/2024/04/18/report1/","tags":[["实验报告","/tags/%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"]],"categories":[["开源软件开发与社区治理","/categories/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%8E%E7%A4%BE%E5%8C%BA%E6%B2%BB%E7%90%86/"]],"content":"博客主题及其选取原因博客主题：Kratos-Rebirth选取原因： 功能全面：包含了首页、文章列表、文章详情功能，且能根据文章所属分类和标签展示文章，“关于”页面可以仿照着自己实现 UI清晰：整个页面功能块分布明确，UI设计符合用户的习惯和直觉，界面元素应该易于识别和操作，且具备一定的美观性 使用指南较为完善：项目给出了较为完整的使用指南，更便于上手 博客页面布局及其设计思路首页首页由顶部导航栏、顶部横幅、博客列表、汇总信息组成，左下角有音乐播放器，右下角有搜索功能和light&#x2F;night切换等功能，下滑后还有回到顶部功能。修改后的博客页面基本保留了原有样式，在原基础上增添了“关于”页面，给出了博客作者的相关信息，删除了不需要的“好伙伴”页面和“链接”页面，除此之外对全部图片进行了替换，并且增加了一些博客来充实整体。 博客详情页博客详情页与首页大致相同，不同之处在于博客列表区域被替换为了博客详情页，右侧的汇总信息增加了当前博客的目录结构，目录结构也可选择不显示。 博客功能实现及其技术选择配置过程博客选择使用hexo框架实现，在安装完所需工具后，使用如下命令安装脚手架工具： 新建一个hexo项目，命名为myblog： 进入myblog文件夹，安装依赖： 修改过程主题配置将选择的主题kratos-rebirth通过git clone命令拉到myblog&#x2F;theme文件夹中： 编辑_config.yml，修改title、language、theme等信息： 复制主题中的_config.html到myblog目录下，并重命名为_config.kratos.rebirth.yml，并修改导航栏如下，并且注释掉不需要的功能（如friends部分）： 内容修改新建博客文章 在myblog&#x2F;source&#x2F;_posts目录下新建md文件，作为博客文章 编辑博客文章的头部信息，title为文章标题，categories为文章分类，tags为文章标签，sticky为文章权重，值越大文章排序越靠前，pic指定首页下文章对应的图片，comments为评论功能，当前已关闭，only指示了当前页面在首页、分类、标签下是否显示 图片替换 images&#x2F;thumb文件夹下的图片为文章对应的各个图片 images文件夹下： about.webp为右侧边栏头像上方的背景图 avatar.webp为头像图片 banner.webp为light模式下的横幅图片 banner_dark.webp为night模式下的横幅图片 bg.webp为light模式下的背景图片 bg_dark.webp为night模式下的背景图片将上述图片全部替换为自己的即可 about页面的实现在_config.kratos.rebirth.yml中，已经配置了about页面的url： 只需在source文件夹下新增about页面，并新增一个markdown文件，作为关于我的页面的实现 博客制作过程中遇到的问题及其解决方法about页面的书写 图片路径应该为&#x2F;images&#x2F;thumb&#x2F;thumb_5.webp之类，而不是images&#x2F;thumb&#x2F;thumb_5.webp 一开始不太清楚关于页面如何实现，后来发现要在source文件夹下新建一个about文件夹，对应了&#x2F;about&#x2F;的url "},{"title":"如何使用 Windows 系统","date":"2024-04-18T09:51:25.258Z","url":"/2024/04/18/windows/","tags":[["系统","/tags/%E7%B3%BB%E7%BB%9F/"]],"categories":[["电脑","/categories/%E7%94%B5%E8%84%91/"]],"content":"如何使用 Windows 系统Windows 是由微软开发的一款操作系统，广泛应用于个人电脑和企业环境中。它提供了丰富的功能和用户友好的界面，以下是一些基本操作和常用功能的介绍： 桌面和任务栏 桌面：Windows 桌面是你进行各种操作和任务的主要区域，你可以在桌面上放置快捷方式、文件夹和小部件等。 任务栏：位于屏幕底部的任务栏包含了“开始”菜单、任务栏图标、通知区域和系统托盘等。你可以通过任务栏快速启动应用程序、切换窗口、查看通知等。 文件资源管理器 浏览文件夹：使用文件资源管理器可以浏览计算机上的文件和文件夹，你可以通过快捷方式、地址栏或者搜索功能来查找和访问文件。 管理文件：文件资源管理器提供了丰富的文件管理功能，包括复制、粘贴、移动、重命名、删除等操作。 应用程序 启动应用程序：你可以通过“开始”菜单、桌面图标、任务栏图标等方式启动已安装的应用程序。 安装和卸载应用程序：Windows 提供了应用商店和控制面板中的“程序和功能”功能，用于安装和卸载应用程序。 设置和个性化 系统设置：通过“设置”应用程序可以调整系统设置，包括网络、声音、显示、隐私、更新和安全等。 个性化：Windows 提供了丰富的个性化选项，你可以调整桌面背景、主题颜色、桌面图标、锁屏图片等，以打造独特的桌面风格。 Windows 功能 搜索功能：使用 Windows 搜索功能可以快速查找文件、应用程序、设置和互联网上的信息。 剪贴板：Windows 剪贴板功能可以记录你复制和剪切的内容，方便你在不同应用程序之间粘贴使用。 任务管理器：任务管理器可以帮助你查看和管理正在运行的应用程序和进程，以及系统资源的使用情况。 备份和恢复：Windows 提供了备份和恢复功能，帮助你定期备份重要文件，并在需要时恢复到之前的状态。 "},{"title":"Hello World","date":"2024-04-18T09:51:25.257Z","url":"/2024/04/18/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"},{"title":"GitHub：程序员的社交平台","date":"2024-04-18T09:51:25.256Z","url":"/2024/04/18/github-introduce/","tags":[["平台","/tags/%E5%B9%B3%E5%8F%B0/"]],"categories":[["电脑","/categories/%E7%94%B5%E8%84%91/"]],"content":"GitHub：程序员的社交平台GitHub 是全球最大的代码托管平台之一，也是程序员、开发者和技术爱好者们共同协作、分享和学习的社交平台。它不仅提供了强大的版本控制功能，还为开发者们提供了一系列工具和功能，帮助他们更高效地管理、开发和分享代码。 特点和功能1. 代码托管GitHub 提供了 Git 分布式版本控制系统的托管服务，开发者们可以在上面创建仓库（Repository），管理和分享他们的代码。 2. 协作和社交开发者们可以通过 Pull Request、Issues 等功能进行协作和交流，共同完善和改进项目。GitHub 的社交功能也使得开发者们可以关注、跟踪和互动，建立技术社区和网络。 3. 文档和博客GitHub 提供了强大的 Markdown 渲染功能，开发者们可以使用 Markdown 语法编写文档、博客和 README 文件，以清晰简洁的方式展示项目信息和技术文档。 4. 自动化工具GitHub Actions 提供了持续集成和持续部署（CI&#x2F;CD）等自动化工具，帮助开发者们构建、测试和部署他们的应用程序。 5. 开放平台GitHub 提供了丰富的 API，使得开发者们可以构建各种应用和工具，与 GitHub 平台进行集成，扩展其功能和应用场景。 如何使用 GitHub创建账号：访问 GitHub 网站，注册一个账号，并设置个人资料和偏好设置。创建仓库：在个人主页或者组织页面中创建一个新的仓库，用于存储和管理你的代码项目。编写代码：使用 Git 工具将代码提交到仓库中，管理版本和修改。协作开发：邀请其他开发者加入项目，共同开发、测试和改进代码。社交互动：在项目中创建 Issues、Pull Request 等，与其他开发者进行交流和讨论。文档编写：使用 Markdown 语法编写项目的 README 文件和文档，清晰地说明项目信息和使用方法。"},{"title":"如何使用 Edge 浏览器","date":"2024-04-18T09:51:25.255Z","url":"/2024/04/18/edge_use/","tags":[["工具","/tags/%E5%B7%A5%E5%85%B7/"]],"categories":[["电脑","/categories/%E7%94%B5%E8%84%91/"]],"content":"如何使用 Edge 浏览器Microsoft Edge 是由微软开发的现代 Web 浏览器，它提供了快速、安全和个性化的网页浏览体验。以下是使用 Edge 浏览器的一些基本操作和功能： 安装 Edge 浏览器 Windows 用户：Edge 浏览器是 Windows 操作系统的默认浏览器，你可以在开始菜单中找到它。如果你还没有安装，可以前往 Microsoft 官网下载并安装最新版本的 Edge 浏览器。 macOS 用户：你可以在 App Store 中搜索 Edge 浏览器并下载安装。 Linux 用户：Edge 浏览器目前还不支持 Linux 系统。 基本浏览操作 打开网页：在地址栏中输入网址，按下回车键即可打开网页。 标签页管理：使用标签页可以在同一个窗口中同时打开多个网页，你可以通过点击加号图标或者使用快捷键 Ctrl + T（Windows）&#x2F; Command + T（macOS）来打开新标签页，使用 Ctrl + Tab（Windows）&#x2F; Command + Option + 向右箭头（macOS）切换标签页。 书签：点击地址栏右侧的星形图标可以将当前网页加入书签，方便下次访问。 浏览历史：点击地址栏左侧的钟表图标可以查看浏览历史记录，方便查找之前访问过的网页。 高级功能 收藏夹：Edge 浏览器提供了收藏夹功能，你可以将常访问的网页添加到收藏夹中，以便快速访问。 阅读模式：点击地址栏左侧的书籍图标可以切换到阅读模式，去除网页中的广告和其他干扰元素，提供更好的阅读体验。 扩展和插件：Edge 浏览器支持安装扩展和插件，你可以前往 Microsoft Edge Add-ons Store 下载并安装你需要的扩展。 同步功能：你可以使用 Microsoft 账号登录 Edge 浏览器，启用同步功能，使得书签、扩展和设置可以在多台设备之间同步。 隐私和安全 隐私模式：Edge 浏览器提供了隐私模式，打开隐私模式后，浏览历史、cookie 和其他浏览数据不会被保存。 安全浏览：Edge 浏览器内置了智能防护和安全浏览功能，可以及时发现和阻止恶意网站和下载，保护用户的个人信息和设备安全。 "},{"title":"C 语言介绍","date":"2024-04-18T09:51:25.254Z","url":"/2024/04/18/clanguage/","tags":[["编程语言","/tags/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"]],"categories":[["电脑","/categories/%E7%94%B5%E8%84%91/"]],"content":"C 语言介绍C 语言是一种通用的、面向过程式的计算机编程语言，由美国计算机科学家丹尼斯·里奇（Dennis Ritchie）在 1972 年设计和开发。它被广泛应用于系统软件、应用软件、驱动程序、游戏开发等领域，并且对后续编程语言的设计产生了重大影响。 特点和优势 简洁而高效：C 语言的语法简洁清晰，易于学习和理解，同时具有高效的性能和执行速度。 跨平台性：C 语言具有很强的跨平台性，可以在各种操作系统和硬件平台上编写和运行程序。 强大的标准库：C 标准库提供了丰富的函数和工具，用于处理文件操作、内存管理、字符串处理等常用任务。 底层编程：C 语言允许程序员直接操作内存和硬件，适用于系统级编程和嵌入式开发等场景。 学习 C 语言 语法基础：学习 C 语言首先要掌握其基本语法，包括变量、数据类型、运算符、控制语句等。 函数和模块化编程：学习如何定义和调用函数，以及如何使用模块化编程的方法组织和管理代码。 指针和内存管理：了解指针的概念和使用方法，以及内存管理和动态内存分配的技术。 文件操作：学习如何在 C 语言中进行文件操作，包括文件的打开、读写、关闭等操作。 数据结构和算法：掌握常见的数据结构和算法，如数组、链表、栈、队列等，以及它们的实现和应用。 应用领域 系统编程：C 语言常用于编写操作系统、驱动程序、嵌入式系统等底层软件。 应用软件：许多应用程序和工具，如文本编辑器、编译器、数据库管理系统等，都是使用 C 语言开发的。 游戏开发：C 语言在游戏开发领域具有重要地位，许多游戏引擎和游戏框架都是使用 C 语言编写的。 网络编程：C 语言可以用于开发网络应用程序，如服务器端程序、网络协议栈等。 继续学习和进阶 深入学习：学习 C 语言的高级特性和技术，如多线程编程、网络编程、内存管理优化等。 阅读源代码：阅读和分析开源项目和标准库源代码，学习优秀的编程实践和设计模式。 学习其他语言：C 语言作为一种基础语言，可以为学习其他编程语言打下坚实的基础，如 C++、Java、Python 等。 "}]